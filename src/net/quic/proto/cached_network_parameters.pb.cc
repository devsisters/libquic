// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cached_network_parameters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cached_network_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace net {

void protobuf_ShutdownFile_cached_5fnetwork_5fparameters_2eproto() {
  delete CachedNetworkParameters::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CachedNetworkParameters::default_instance_ = new CachedNetworkParameters();
  CachedNetworkParameters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cached_5fnetwork_5fparameters_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto_once_);
void protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto_once_,
                 &protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cached_5fnetwork_5fparameters_2eproto {
  StaticDescriptorInitializer_cached_5fnetwork_5fparameters_2eproto() {
    protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto();
  }
} static_descriptor_initializer_cached_5fnetwork_5fparameters_2eproto_;
#endif

// ===================================================================

bool CachedNetworkParameters_PreviousConnectionState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::SLOW_START;
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::CONGESTION_AVOIDANCE;
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::PreviousConnectionState_MIN;
const CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters::PreviousConnectionState_MAX;
const int CachedNetworkParameters::PreviousConnectionState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CachedNetworkParameters::kServingRegionFieldNumber;
const int CachedNetworkParameters::kBandwidthEstimateBytesPerSecondFieldNumber;
const int CachedNetworkParameters::kMaxBandwidthEstimateBytesPerSecondFieldNumber;
const int CachedNetworkParameters::kMaxBandwidthTimestampSecondsFieldNumber;
const int CachedNetworkParameters::kMinRttMsFieldNumber;
const int CachedNetworkParameters::kPreviousConnectionStateFieldNumber;
const int CachedNetworkParameters::kTimestampFieldNumber;
#endif  // !_MSC_VER

CachedNetworkParameters::CachedNetworkParameters()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CachedNetworkParameters::InitAsDefaultInstance() {
}

CachedNetworkParameters::CachedNetworkParameters(const CachedNetworkParameters& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CachedNetworkParameters::SharedCtor() {
  _cached_size_ = 0;
  serving_region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  bandwidth_estimate_bytes_per_second_ = 0;
  max_bandwidth_estimate_bytes_per_second_ = 0;
  max_bandwidth_timestamp_seconds_ = GOOGLE_LONGLONG(0);
  min_rtt_ms_ = 0;
  previous_connection_state_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedNetworkParameters::~CachedNetworkParameters() {
  SharedDtor();
}

void CachedNetworkParameters::SharedDtor() {
  if (serving_region_ != &::google::protobuf::internal::GetEmptyString()) {
    delete serving_region_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CachedNetworkParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CachedNetworkParameters& CachedNetworkParameters::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto();
#endif
  return *default_instance_;
}

CachedNetworkParameters* CachedNetworkParameters::default_instance_ = NULL;

CachedNetworkParameters* CachedNetworkParameters::New() const {
  return new CachedNetworkParameters;
}

void CachedNetworkParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serving_region()) {
      if (serving_region_ != &::google::protobuf::internal::GetEmptyString()) {
        serving_region_->clear();
      }
    }
    bandwidth_estimate_bytes_per_second_ = 0;
    max_bandwidth_estimate_bytes_per_second_ = 0;
    max_bandwidth_timestamp_seconds_ = GOOGLE_LONGLONG(0);
    min_rtt_ms_ = 0;
    previous_connection_state_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CachedNetworkParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serving_region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serving_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bandwidth_estimate_bytes_per_second;
        break;
      }

      // optional int32 bandwidth_estimate_bytes_per_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bandwidth_estimate_bytes_per_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bandwidth_estimate_bytes_per_second_)));
          set_has_bandwidth_estimate_bytes_per_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_rtt_ms;
        break;
      }

      // optional int32 min_rtt_ms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_rtt_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_rtt_ms_)));
          set_has_min_rtt_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_previous_connection_state;
        break;
      }

      // optional int32 previous_connection_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previous_connection_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previous_connection_state_)));
          set_has_previous_connection_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_bandwidth_estimate_bytes_per_second;
        break;
      }

      // optional int32 max_bandwidth_estimate_bytes_per_second = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_bandwidth_estimate_bytes_per_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bandwidth_estimate_bytes_per_second_)));
          set_has_max_bandwidth_estimate_bytes_per_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_bandwidth_timestamp_seconds;
        break;
      }

      // optional int64 max_bandwidth_timestamp_seconds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_bandwidth_timestamp_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bandwidth_timestamp_seconds_)));
          set_has_max_bandwidth_timestamp_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedNetworkParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string serving_region = 1;
  if (has_serving_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serving_region(), output);
  }

  // optional int32 bandwidth_estimate_bytes_per_second = 2;
  if (has_bandwidth_estimate_bytes_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bandwidth_estimate_bytes_per_second(), output);
  }

  // optional int32 min_rtt_ms = 3;
  if (has_min_rtt_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_rtt_ms(), output);
  }

  // optional int32 previous_connection_state = 4;
  if (has_previous_connection_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->previous_connection_state(), output);
  }

  // optional int32 max_bandwidth_estimate_bytes_per_second = 5;
  if (has_max_bandwidth_estimate_bytes_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_bandwidth_estimate_bytes_per_second(), output);
  }

  // optional int64 max_bandwidth_timestamp_seconds = 6;
  if (has_max_bandwidth_timestamp_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->max_bandwidth_timestamp_seconds(), output);
  }

  // optional int64 timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->timestamp(), output);
  }

}

int CachedNetworkParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serving_region = 1;
    if (has_serving_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serving_region());
    }

    // optional int32 bandwidth_estimate_bytes_per_second = 2;
    if (has_bandwidth_estimate_bytes_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bandwidth_estimate_bytes_per_second());
    }

    // optional int32 max_bandwidth_estimate_bytes_per_second = 5;
    if (has_max_bandwidth_estimate_bytes_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bandwidth_estimate_bytes_per_second());
    }

    // optional int64 max_bandwidth_timestamp_seconds = 6;
    if (has_max_bandwidth_timestamp_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_bandwidth_timestamp_seconds());
    }

    // optional int32 min_rtt_ms = 3;
    if (has_min_rtt_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_rtt_ms());
    }

    // optional int32 previous_connection_state = 4;
    if (has_previous_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->previous_connection_state());
    }

    // optional int64 timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedNetworkParameters::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CachedNetworkParameters*>(&from));
}

void CachedNetworkParameters::MergeFrom(const CachedNetworkParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serving_region()) {
      set_serving_region(from.serving_region());
    }
    if (from.has_bandwidth_estimate_bytes_per_second()) {
      set_bandwidth_estimate_bytes_per_second(from.bandwidth_estimate_bytes_per_second());
    }
    if (from.has_max_bandwidth_estimate_bytes_per_second()) {
      set_max_bandwidth_estimate_bytes_per_second(from.max_bandwidth_estimate_bytes_per_second());
    }
    if (from.has_max_bandwidth_timestamp_seconds()) {
      set_max_bandwidth_timestamp_seconds(from.max_bandwidth_timestamp_seconds());
    }
    if (from.has_min_rtt_ms()) {
      set_min_rtt_ms(from.min_rtt_ms());
    }
    if (from.has_previous_connection_state()) {
      set_previous_connection_state(from.previous_connection_state());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void CachedNetworkParameters::CopyFrom(const CachedNetworkParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedNetworkParameters::IsInitialized() const {

  return true;
}

void CachedNetworkParameters::Swap(CachedNetworkParameters* other) {
  if (other != this) {
    std::swap(serving_region_, other->serving_region_);
    std::swap(bandwidth_estimate_bytes_per_second_, other->bandwidth_estimate_bytes_per_second_);
    std::swap(max_bandwidth_estimate_bytes_per_second_, other->max_bandwidth_estimate_bytes_per_second_);
    std::swap(max_bandwidth_timestamp_seconds_, other->max_bandwidth_timestamp_seconds_);
    std::swap(min_rtt_ms_, other->min_rtt_ms_);
    std::swap(previous_connection_state_, other->previous_connection_state_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CachedNetworkParameters::GetTypeName() const {
  return "net.CachedNetworkParameters";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
