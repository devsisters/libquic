// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source_address_token.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "source_address_token.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace net {

void protobuf_ShutdownFile_source_5faddress_5ftoken_2eproto() {
  delete SourceAddressToken::default_instance_;
  delete SourceAddressTokens::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_source_5faddress_5ftoken_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_source_5faddress_5ftoken_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::net::protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto();
  SourceAddressToken::default_instance_ = new SourceAddressToken();
  SourceAddressTokens::default_instance_ = new SourceAddressTokens();
  SourceAddressToken::default_instance_->InitAsDefaultInstance();
  SourceAddressTokens::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_source_5faddress_5ftoken_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_source_5faddress_5ftoken_2eproto_once_);
void protobuf_AddDesc_source_5faddress_5ftoken_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_source_5faddress_5ftoken_2eproto_once_,
                 &protobuf_AddDesc_source_5faddress_5ftoken_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_source_5faddress_5ftoken_2eproto {
  StaticDescriptorInitializer_source_5faddress_5ftoken_2eproto() {
    protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
  }
} static_descriptor_initializer_source_5faddress_5ftoken_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SourceAddressToken::kIpFieldNumber;
const int SourceAddressToken::kTimestampFieldNumber;
const int SourceAddressToken::kCachedNetworkParametersFieldNumber;
#endif  // !_MSC_VER

SourceAddressToken::SourceAddressToken()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SourceAddressToken::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cached_network_parameters_ = const_cast< ::net::CachedNetworkParameters*>(
      ::net::CachedNetworkParameters::internal_default_instance());
#else
  cached_network_parameters_ = const_cast< ::net::CachedNetworkParameters*>(&::net::CachedNetworkParameters::default_instance());
#endif
}

SourceAddressToken::SourceAddressToken(const SourceAddressToken& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SourceAddressToken::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  timestamp_ = GOOGLE_LONGLONG(0);
  cached_network_parameters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceAddressToken::~SourceAddressToken() {
  SharedDtor();
}

void SourceAddressToken::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cached_network_parameters_;
  }
}

void SourceAddressToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SourceAddressToken& SourceAddressToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#endif
  return *default_instance_;
}

SourceAddressToken* SourceAddressToken::default_instance_ = NULL;

SourceAddressToken* SourceAddressToken::New() const {
  return new SourceAddressToken;
}

void SourceAddressToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyString()) {
        ip_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_cached_network_parameters()) {
      if (cached_network_parameters_ != NULL) cached_network_parameters_->::net::CachedNetworkParameters::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SourceAddressToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cached_network_parameters;
        break;
      }

      // optional .net.CachedNetworkParameters cached_network_parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cached_network_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cached_network_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SourceAddressToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // required int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional .net.CachedNetworkParameters cached_network_parameters = 3;
  if (has_cached_network_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->cached_network_parameters(), output);
  }

}

int SourceAddressToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .net.CachedNetworkParameters cached_network_parameters = 3;
    if (has_cached_network_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cached_network_parameters());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceAddressToken::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SourceAddressToken*>(&from));
}

void SourceAddressToken::MergeFrom(const SourceAddressToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_cached_network_parameters()) {
      mutable_cached_network_parameters()->::net::CachedNetworkParameters::MergeFrom(from.cached_network_parameters());
    }
  }
}

void SourceAddressToken::CopyFrom(const SourceAddressToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceAddressToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SourceAddressToken::Swap(SourceAddressToken* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(cached_network_parameters_, other->cached_network_parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SourceAddressToken::GetTypeName() const {
  return "net.SourceAddressToken";
}


// ===================================================================

#ifndef _MSC_VER
const int SourceAddressTokens::kTokensFieldNumber;
#endif  // !_MSC_VER

SourceAddressTokens::SourceAddressTokens()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SourceAddressTokens::InitAsDefaultInstance() {
}

SourceAddressTokens::SourceAddressTokens(const SourceAddressTokens& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SourceAddressTokens::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceAddressTokens::~SourceAddressTokens() {
  SharedDtor();
}

void SourceAddressTokens::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SourceAddressTokens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SourceAddressTokens& SourceAddressTokens::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#endif
  return *default_instance_;
}

SourceAddressTokens* SourceAddressTokens::default_instance_ = NULL;

SourceAddressTokens* SourceAddressTokens::New() const {
  return new SourceAddressTokens;
}

void SourceAddressTokens::Clear() {
  tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SourceAddressTokens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.SourceAddressToken tokens = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tokens;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, NULL));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SourceAddressTokens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.SourceAddressToken tokens = 4;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->tokens(i), output);
  }

}

int SourceAddressTokens::ByteSize() const {
  int total_size = 0;

  // repeated .net.SourceAddressToken tokens = 4;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokens(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceAddressTokens::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SourceAddressTokens*>(&from));
}

void SourceAddressTokens::MergeFrom(const SourceAddressTokens& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokens_.MergeFrom(from.tokens_);
}

void SourceAddressTokens::CopyFrom(const SourceAddressTokens& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceAddressTokens::IsInitialized() const {

  for (int i = 0; i < tokens_size(); i++) {
    if (!this->tokens(i).IsInitialized()) return false;
  }
  return true;
}

void SourceAddressTokens::Swap(SourceAddressTokens* other) {
  if (other != this) {
    tokens_.Swap(&other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SourceAddressTokens::GetTypeName() const {
  return "net.SourceAddressTokens";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
